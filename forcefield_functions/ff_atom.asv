%% ff_atom.m
% * This function tries to assign all atoms according to some custom force field
%
%% Version
% 2.10
%
%% Contact
% Please report problems/bugs to michael.holmboe@umu.se
%
%% Examples
% # atom=ff_atom(atom,Box_dim)
% # atom=ff_atom(atom,Box_dim,ff)


function atom=ff_atom(atom,Box_dim,varargin)
%%
format compact;

if nargin>2
    ffname=varargin{1};
end

distance_factor=0.6;
rmaxlong=2.25;
if nargin>5
    distance_factor=varargin{4};
end
if nargin>6
    rmaxlong=varargin{5};
end

atom=element_atom(atom);
[atom.element]=atom.type;

for i=1:size(atom,2)
    if strncmpi(atom(i).type,{'Si'},2);atom(i).element={'Si'};
    elseif strncmp(atom(i).type,{'SC'},2);atom(i).element={'Si'};
    elseif strncmpi(atom(i).type,{'Alt'},3);atom(i).element={'Alt'};
    elseif strncmpi(atom(i).type,{'Al'},2);atom(i).element={'Al'};
    elseif strncmpi(atom(i).type,{'Mg'},2);atom(i).element={'Mg'};
    elseif strncmpi(atom(i).type,{'Fe'},2);atom(i).element={'Fe'};
        %         elseif strncmpi(atom(i).type,{'Mn'},2);atom(i).element={'Mn'};
    elseif strncmpi(atom(i).type,{'Ow'},2);atom(i).element={'Ow'};
    elseif strncmpi(atom(i).type,{'Hw'},2);atom(i).element={'Hw'};
    elseif strncmpi(atom(i).type,{'O'},1);atom(i).element={'O'};
    elseif strncmpi(atom(i).type,{'H'},1);atom(i).element={'H'};
    else
        [atom(i).element]=atom(i).type;
    end
end

[atom.type]=atom.element;
[atom.fftype]=atom.element;

XYZ_labels=[atom.type]';
XYZ_data=[[atom.x]' [atom.y]' [atom.z]'];

atom=bond_atom(atom,Box_dim,rmaxlong,distance_factor);
atom=remove_sametype_bond(atom,Box_dim,Bond_index);

assignin('caller','nBonds',nBonds);
assignin('caller','radius_limit',radius_limit);
assignin('caller','Bond_index',Bond_index);
assignin('caller','Neigh_index',Neigh_index);
assignin('caller','dist_matrix',dist_matrix);

All_Neighbours=[];

i=1;
while i <= size(atom,2)
    if mod(i,100)==1
        i-1
    end
    
    if strncmpi([atom(i).resname],'SOL',3)==0 && strncmpi([atom(i).resname],'ION',3)==0
        
        nNeigh=numel([atom(i).neigh]);
        
        if nNeigh>0
            
            Neigh_cell = sort([atom(i).neigh.type]);
            if length(Neigh_cell) > 0
                Neighbours=strcat(Neigh_cell{:});
                All_Neighbours=[All_Neighbours;{Neighbours}];
            else
                Neighbours={'Nan'};
            end
            
            % If the element is Si
            if strncmpi(atom(i).type,{'Si'},2) % Si

                if sum(strncmp({'O'},[atom(i).neigh.type],1)) == 4 % Si O O O O
                    atom(i).fftype={'Si'};
                elseif length(nNeigh) > 4
                    disp('Si atom over coordinated')
                    i
                    Neighbours
                    atom(i).fftype={'Si^'};
                    atom(i).neigh.dist
                    atom(i).neigh.index
                elseif length(nNeigh) < 4 % == 3
                    disp('Si atom under coordinated')
                    i
                    Neighbours
                    atom(i).fftype={'Si_'};
                    if Heal_Si == 1
                        atom(size(atom,2)+1)=atom(find(strcmp([atom.type],'O'),1));
                        atom(end).index=size(atom,2);
                        Neigh = neighbor_func(i,[[atom(i).x]' [atom(i).y]' [atom(i).z]'],[[atom.x]' [atom.y]' [atom.z]'],Box_dim,2.6);
                        NewNeighCoords=num2cell([atom(i).x atom(i).y atom(i).z]+0.85*max_distance*mean([Neigh.r_vec(:,1) Neigh.r_vec(:,2) 1.5*Neigh.r_vec(:,3)],1)/norm(mean([Neigh.r_vec(:,1) Neigh.r_vec(:,2) 1.5*Neigh.r_vec(:,3)],1)));
                        [atom(end).x atom(end).y atom(end).z]=deal(NewNeighCoords{:});
                    end
                else
                    i
                    atom(i).type
                    Neighbours
                end
            end

            
            % If the element is H
            if strncmp(atom(i).type,{'H'},1) % H
                
                if size(Neigh_cell,1) == 1
                    atom(i).fftype={'H'};
                elseif length(nNeigh) > 1
                    disp('H atom over coordinated')
                    i
                    Neighbours
                    atom(i).fftype={'H^'};
                    atom(i).fftype={'H'};
                elseif length(nNeigh) < 1
                    disp('H atom under coordinated')
                    i
                    Neighbours
                    atom(i).fftype={'H_'};
                    if Heal_H == 1
                        atom(size(atom,2)+1)=atom(find(strncmpi([atom.type],'O',1),1));
                        atom(end).index=size(atom,2);
                        Neigh = neighbor_func(i,[[atom(i).x]' [atom(i).y]' [atom(i).z]'],[[atom.x]' [atom.y]' [atom.z]'],Box_dim,2.6);
                        NewNeighCoords=num2cell([atom(i).x atom(i).y atom(i).z]+mean([Neigh.r_vec(:,1) Neigh.r_vec(:,2) Neigh.r_vec(:,3)],1)/norm(mean([Neigh.r_vec(:,1) Neigh.r_vec(:,2) Neigh.r_vec(:,3)],1)));
                        [atom(end).x atom(end).y atom(end).z]=deal(NewNeighCoords{:});
                    elseif length(nNeigh) < 1
                        Neighbours
                        %                             atom(i)=[];
                        %                             disp('removed atom...')
                        i
                        pause
                    end
                    
                end
                
            end
            
            
            % If the element is O
            if strncmp(atom(i).type,{'O'},1)
                if strcmp(Neighbours,'AlAlH')
                    atom(i).fftype={'Oh'};
                elseif strcmp(Neighbours,'AlAlSi')
                    atom(i).fftype={'Op'};
                elseif strcmp(Neighbours,'AlHH')
                    atom(i).fftype={'Oalhh'};
                elseif strcmp(Neighbours,'AlHSi')
                    atom(i).fftype={'Oahs'}; % Al-OH-Si for acidic edge
                elseif strcmp(Neighbours,'AlH')
                    atom(i).fftype={'Oalh'}; % Al-O-H or Al-O-Si
                elseif  strncmp(Neighbours,'AlHMgo',5)
                    atom(i).fftype={'Ohmg'};
                elseif  strncmp(Neighbours,'AlHMg',5)
                    atom(i).fftype={'Ohmg'};
                elseif strcmp(Neighbours,'AlMgoSi')
                    atom(i).fftype={'Omg'};
                elseif strcmp(Neighbours,'AlMgSi')
                    atom(i).fftype={'Omg'};
                elseif  strncmp(Neighbours,'AltMgh',6)
                    atom(i).fftype={'Oalt'};
                elseif strcmp(Neighbours,'HSi')
                    atom(i).fftype={'Osih'};
                elseif strcmp(Neighbours,'AlOmg')
                    atom(i).fftype={'Odsub'};
                elseif strcmp(Neighbours,'AlAltH')
                    atom(i).fftype={'Oalt'};
                elseif strcmp(Neighbours,'AlAlAlH')
                    atom(i).fftype={'Oh'};
                elseif strcmp(Neighbours,'AlAlAlt')
                    atom(i).fftype={'Oalt'};
                elseif strcmp(Neighbours,'AlAlAl')
                    atom(i).fftype={'Oalt'};
                elseif strncmp(Neighbours,'AlAlAlMg',8)
                    atom(i).fftype={'Ob'};
                elseif strcmp(Neighbours,'AlAlAlAl')
                    atom(i).fftype={'Ob'};
                elseif strcmp(Neighbours,'AlAlAlAlt')
                    atom(i).fftype={'Ob'};
                elseif strcmp(Neighbours,'AltSi')
                    atom(i).fftype={'Oalt'};
                elseif strcmp(Neighbours,'AlSi') % Al-O-H or Al-O-Si
                    if sum(ismember(find(strcmp([atom.fftype],'Alt')),[atom(i).neigh.index])) > 0
                        atom(i).fftype={'Oalt'};
                    elseif sum(ismember(find(strcmp([atom.fftype],'Alt')),[atom(i).neigh.index])) < 1
                        atom(i).fftype={'Oalsi'}; % Believe this was a special zeolite thing
                    end
                    %                 elseif strcmp(Neighbours,'AlAl')
                    %                     atom(i).fftype={'O'};
                elseif strcmp(Neighbours,'AlAlSiSi')
                    atom(i).fftype={'Oz'};
                elseif strcmp(Neighbours,'CahCahH')
                    atom(i).fftype={'Oh'};
                elseif strcmp(Neighbours,'AltFeoFeo')
                    atom(i).fftype={'Oalt'};
                elseif strcmp(Neighbours,'FeFe') || strcmp(Neighbours,'FeoFeo')
                    atom(i).fftype={'Ob'};
                elseif strcmp(Neighbours,'FeFeFe') || strcmp(Neighbours,'FeoFeoFeo')
                    atom(i).fftype={'Ob'};
                elseif strcmp(Neighbours,'FeFeFeFe') || strcmp(Neighbours,'FeoFeoFeoFeo')
                    atom(i).fftype={'Ob'};
                elseif strcmp(Neighbours,'FeFeSi') || strcmp(Neighbours,'FeoFeoSi')
                    atom(i).fftype={'Op'};
                elseif strcmp(Neighbours,'FeFeFeH') || strcmp(Neighbours,'FeoFeoFeoH')
                    atom(i).fftype={'Oh'};
                elseif strcmp(Neighbours,'FeFeH') || strcmp(Neighbours,'FeoFeoH')
                    atom(i).fftype={'Oh'};
                elseif strcmp(Neighbours,'FeH') || strcmp(Neighbours,'FeoH')
                    atom(i).fftype={'Oh'};
                elseif strcmp(Neighbours,'FeFe') || strcmp(Neighbours,'FeoFeo')
                    atom(i).fftype={'Odsub'};
                elseif strcmp(Neighbours,'FetFet')
                    atom(i).fftype={'Oh'};
                elseif strcmp(Neighbours,'FetFetH')
                    atom(i).fftype={'Oh'};
                elseif strcmp(Neighbours,'Fe2Fe2Fe2Fe2Fe2Fe2')
                    atom(i).fftype={'Ob'};
                elseif strcmp(Neighbours,'CaoCaoCaoCaoCaoCao') || strcmp(Neighbours,'CaCaCaCaCaCa')
                    atom(i).fftype={'Ob'};
                elseif strcmp(Neighbours,'MghMghMghMghMghMgh')
                    atom(i).fftype={'Ob'};
                elseif strcmp(Neighbours,'MgoMgoMgoMgoMgoMgo') || strcmp(Neighbours,'MgMgMgMgMgMg')
                    atom(i).fftype={'Ob'};
                elseif strcmp(Neighbours,'MgoMgoSi') || strcmp(Neighbours,'FeFeSi')
                    atom(i).fftype={'Odsub'};
                elseif strcmp(Neighbours,'MgMgSi') || strcmp(Neighbours,'FeoFeoSi')
                    atom(i).fftype={'Odsub'};
                elseif strcmp(Neighbours,'MgMgMgSi') || strcmp(Neighbours,'MgoMgoMgoSi') || strcmp(Neighbours,'MghMghMghSi') || strcmp(Neighbours,'FeoFeoFeoSi')
                    atom(i).fftype={'Op'};
                elseif strcmp(Neighbours,'HMgMgMg') || strcmp(Neighbours,'HMghMghMgh') || strcmp(Neighbours,'FeoFeoFeoH')
                    atom(i).fftype={'Oh'};
                elseif strcmp(Neighbours,'HMgMg') || strcmp(Neighbours,'HMghMgh') || strcmp(Neighbours,'FeoFeoH')
                    atom(i).fftype={'Ohmg'};
                elseif strcmp(Neighbours,'HMg') || strcmp(Neighbours,'HMgh')
                    atom(i).fftype={'Ome'};
                elseif strcmp(Neighbours,'HHMg') || strcmp(Neighbours,'HHMgh')
                    atom(i).fftype={'Omhh'};
                elseif strncmp(Neighbours,'HHMgo',4)
                    atom(i).fftype={'Omhh'};
                elseif strcmp(Neighbours,'SiSi')
                    atom(i).fftype={'Ob'}; % Old version atom(i).fftype={'O'};
                elseif strncmp(Neighbours,'BeBe',4)
                    atom(i).fftype={'Ob'}; % Old version atom(i).fftype={'O'};
                elseif strcmp(Neighbours,'MnMnMn')
                    atom(i).fftype={'Omn'};
                elseif strcmp(Neighbours,'Mn4Mn4Mn4')
                    atom(i).fftype={'Omn'};
                elseif strcmp(Neighbours,'Mn3Mn4Mn4')
                    atom(i).fftype={'Omn'};
                elseif strcmp(Neighbours,'Mn2Mn3Mn4')
                    atom(i).fftype={'Omn'};
                elseif strcmp(Neighbours,'Mn2Mn4Mn4')
                    atom(i).fftype={'Omn'};
                elseif strcmp(Neighbours,'Mn4Mn4')
                    atom(i).fftype={'Omn'};
                elseif strcmp(Neighbours,'Mn3Mn4')
                    atom(i).fftype={'Omn'};
                elseif strcmp(Neighbours,'Mn2Mn3')
                    atom(i).fftype={'Omn'};
                elseif strcmp(Neighbours,'Mn2Mn4')
                    atom(i).fftype={'Omn'};
                elseif strcmp(Neighbours,'HH')
                    atom(i).fftype={'Ow'};
                    disp('Water?')
                elseif length(nNeigh) > 2
                    disp('O atom over coordinated')
                    i
                    Neighbours
                    atom(i).fftype={'O^'};
                elseif length(nNeigh) == 1 || strcmp(Neighbours,'AlAl') || strcmp(Neighbours,'AlMg') || strcmp(Neighbours,'Si')
                    if strcmp(Neighbours,'Si')
                        atom(i).fftype={'Osi'};
                    elseif strncmp(Neighbours,'AlAl',2)
                        atom(i).fftype={'Oal'};
                    else
                        disp('O atom under coordinated')
                        i
                        Neighbours
                        atom(i).fftype={'O_'};
                    end
                    if Heal_O == 1
                        try
                            atom(size(atom,2)+1)=atom(find(strncmp([atom.type],'H',1),1));
                        catch
                            atom(size(atom,2)+1)=atom(i);
                        end
                        atom(end).type={'H'};
                        atom(end).fftype={'H'};
                        atom(end).index=size(atom,2);
                        Neigh = neighbor_func(i,[[atom(i).x]' [atom(i).y]' [atom(i).z]'],[[atom.x]' [atom.y]' [atom.z]'],Box_dim,2.6);
                        NewNeighCoords=num2cell([atom(i).x atom(i).y (atom(i).z)]-1*mean([Neigh.r_vec(:,1) Neigh.r_vec(:,2) 1*Neigh.r_vec(:,3)],1)/norm(mean([Neigh.r_vec(:,1) Neigh.r_vec(:,2) 1*Neigh.r_vec(:,3)],1)));
                        [atom(end).x atom(end).y atom(end).z]=deal(NewNeighCoords{:});
                    end
                elseif length(nNeigh) == 0
                    Neighbours
                    atom(i)
                    atom(i).neigh.dist
                    %                     atom(i)=[];
                    disp('remove O atom...?')
                    
                    rm_ind=[rm_ind i];
                    pause
                end
            end
        end
    end
    i=i+1;
    [atom.type]=atom.fftype;
end

temp=element_atom(atom);
[atom.element]=temp.type;

if sum(strncmp([atom.type],'Ow',2))>0
    ind_Ow=find(strncmpi([atom.type],'Ow',2));
    ind_Hw=sort([ind_Ow+1 ind_Ow+2]);
    [atom(ind_Hw).type]=deal({'Hw'});
elseif sum(strncmp([atom.type],'OW',2))>0
    ind_Ow=find(strncmpi([atom.type],'OW',2));
    ind_Hw1=sort(ind_Ow+1);
    ind_Hw2=sort(ind_Ow+2);
    [atom(ind_Hw1).type]=deal({'HW1'});
    [atom(ind_Hw2).type]=deal({'HW2'});
end

try
    % If the usual atom types
    atom = charge_atom(atom,Box_dim,ffname,watermodel);
    [C,ia,ic]=unique([atom.type],'first');
    [atom(ia).charge]
    % If new atom types
    atom = charge_atom(atom,Box_dim,ffname,watermodel,'more');
    [C,ia,ic]=unique([atom.type],'first');
    [atom(ia).charge]
catch
    disp('Could not set the charge...')
end

for i=1:length(unique([atom.type]))
    try
        new_Atom_label=sort(unique([atom.type]));
        ind=ismember([atom.type],new_Atom_label(i));
        assignin('caller',strcat(char(new_Atom_label(i)),'_atom'),atom(ind));
    catch
        disp('Could not finalize:')
        i
        Atom_label
    end
end

assignin('caller','All_Neighbours',unique(All_Neighbours));


